/**
 * @param {string} s
 * @param {string[]} words
 * @return {number[]}
 */
var findSubstring = function(s, words) {
    let oneWordLength = words[0].length
    let wordsLength = words.length
    let windowLength = words.length * words[0].length
    let wordMap = {}
    let indexArray = []
    for (let word of words) {
        wordMap[word] = (wordMap[word] || 0) + 1;
    }
    function isValidSubString (string, wordMap){
        let seenMap = {}
        for (let i=0; i<string.length; i+=oneWordLength ){
            let expectedMatch = string.slice(i, i+oneWordLength)
            if (!wordMap[expectedMatch]) return false
            seenMap[expectedMatch] = (seenMap[expectedMatch] || 0) +1
            if (seenMap[expectedMatch] > wordMap[expectedMatch]) return false
        }
        return true
    }
  for (let i=0 ; i<= s.length - windowLength ;i++){
    let checkerString = s.slice(i, i+windowLength)
    if(isValidSubString(checkerString, wordMap))
        indexArray.push(i)
  }

  return indexArray
};
Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]

Output: [0,9]

Explanation:

The substring starting at 0 is "barfoo". It is the concatenation of ["bar","foo"] which is a permutation of words.
The substring starting at 9 is "foobar". It is the concatenation of ["foo","bar"] which is a permutation of words.

Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]

Output: []

Explanation:

There is no concatenated substring.

Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]

Output: [6,9,12]

Explanation:

The substring starting at 6 is "foobarthe". It is the concatenation of ["foo","bar","the"].
The substring starting at 9 is "barthefoo". It is the concatenation of ["bar","the","foo"].
The substring starting at 12 is "thefoobar". It is the concatenation of ["the","foo","bar"].
