Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length


To solve the problem of counting the number of subarrays with exactly 
𝑘
k different integers using the sliding window technique, we can break it down into a few clear steps. The approach uses two helper functions: one to count subarrays with at most 
𝑘
k distinct integers, and another to count those with at most 
𝑘
−
1
k−1 distinct integers. The difference between the two counts will give us the number of subarrays with exactly 
𝑘
k distinct integers.

Approach
Two-Pointer/Sliding Window: We use a two-pointer technique to maintain a sliding window that expands and contracts based on the number of distinct integers within the window.

Counting Subarrays with at Most 
𝑘
k Distinct Integers:

Initialize two pointers, left and right, both starting at the beginning of the array.
Use a map (or object) to count the frequency of integers in the current window.
Expand the right pointer to include more elements and increase the count of distinct integers.
If the count exceeds 
𝑘
k, move the left pointer to reduce the count back to at most 
𝑘
k.
For each valid position of right, the number of valid subarrays ending at right is given by right - left + 1 (all subarrays starting from any index between left and right).
Count Subarrays with Exactly 
𝑘
k Distinct Integers:

To find the count of subarrays with exactly 
𝑘
k distinct integers, use the formula:
count with exactly 
𝑘
=
count with at most 
𝑘
−
count with at most 
(
𝑘
−
1
)
count with exactly k=count with at most k−count with at most (k−1)
Implementation
Here's the implementation in JavaScript:

javascript
Copy code
var subarraysWithKDistinct = function(nums, k) {
    // Helper function to count subarrays with at most k distinct integers
    const atMostK = (k) => {
        let count = 0;
        let left = 0;
        let freqMap = new Map();

        for (let right = 0; right < nums.length; right++) {
            // Add the current element to the frequency map
            freqMap.set(nums[right], (freqMap.get(nums[right]) || 0) + 1);

            // While we have more than k distinct integers, shrink the window from the left
            while (freqMap.size > k) {
                freqMap.set(nums[left], freqMap.get(nums[left]) - 1);
                if (freqMap.get(nums[left]) === 0) {
                    freqMap.delete(nums[left]);
                }
                left++;
            }

            // Count valid subarrays ending at 'right'
            count += right - left + 1;
        }
        return count;
    };

    // The number of subarrays with exactly k distinct integers
    return atMostK(k) - atMostK(k - 1);
};
Explanation of the Code
Function atMostK(k):

Initializes a count to keep track of the number of valid subarrays.
Uses a frequency map (freqMap) to store the count of each integer in the current window.
The right pointer iterates through the array, adding elements to the window.
If the size of the map exceeds 
𝑘
k, the left pointer moves to the right, shrinking the window until the size is at most 
𝑘
k.
For each position of right, it calculates the number of valid subarrays ending at right and adds it to count.
Final Calculation:

The main function computes the difference between the counts of subarrays with at most 
𝑘
k distinct integers and those with at most 
𝑘
−
1
k−1 distinct integers.
Time Complexity (TC)
Time Complexity: The algorithm runs in 
𝑂
(
𝑛
)
O(n), where 
𝑛
n is the length of the input array. Each element is processed at most twice (once by the right pointer and once by the left pointer).
Space Complexity (SC)
Space Complexity: The space complexity is 
𝑂
(
𝑛
)
O(n) in the worst case, as we may store all unique elements in the freqMap.
Summary
This approach effectively counts the number of subarrays with exactly 
𝑘
k distinct integers using the sliding window technique. It ensures optimal time complexity while handling varying counts of distinct integers by leveraging two helper functions for counting.
