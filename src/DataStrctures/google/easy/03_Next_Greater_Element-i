To solve this problem in O(nums1.length + nums2.length) time, we can use a monotonic stack and a hashmap to store the next greater element for each element in nums2. Here’s how the solution works:

Solution Approach
Monotonic Stack:

Use a stack to keep track of elements in decreasing order as we traverse nums2 from right to left.
For each element in nums2, pop elements from the stack until the top of the stack is greater than the current element (the next greater element for this element).
If no greater element exists in the stack, store -1 for this element in the hashmap.
Hashmap:

Store each element in nums2 as a key, with its next greater element as the value. This allows us to directly retrieve the next greater element for each element in nums1 in constant time.
Result Array:

Once we’ve built the hashmap, we simply iterate through nums1 and fetch the next greater element from the hashmap.
Code
Here’s the code implementing the above approach:

javascript
Copy code
var nextGreaterElement = function(nums1, nums2) {
    // Hashmap to store the next greater element for each number in nums2
    const nextGreaterMap = new Map();
    const stack = [];

    // Traverse nums2 from right to left to find the next greater elements
    for (let i = nums2.length - 1; i >= 0; i--) {
        const num = nums2[i];

        // Pop elements from stack that are less than or equal to the current number
        while (stack.length > 0 && stack[stack.length - 1] <= num) {
            stack.pop();
        }

        // If the stack is empty, there is no greater element to the right
        // Otherwise, the next greater element is at the top of the stack
        nextGreaterMap.set(num, stack.length === 0 ? -1 : stack[stack.length - 1]);

        // Push the current number onto the stack
        stack.push(num);
    }

    // For each number in nums1, get its next greater element from the hashmap
    return nums1.map(num => nextGreaterMap.get(num));
};
Explanation with Example
For nums1 = [4,1,2] and nums2 = [1,3,4,2]:

Traverse nums2 from right to left:

2: No greater element to the right, so nextGreaterMap[2] = -1.
4: No greater element to the right, so nextGreaterMap[4] = -1.
3: Next greater element is 4, so nextGreaterMap[3] = 4.
1: Next greater element is 3, so nextGreaterMap[1] = 3.
After this traversal, nextGreaterMap becomes {1: 3, 3: 4, 4: -1, 2: -1}.

For each element in nums1, use nextGreaterMap to get the result:

4 → -1
1 → 3
2 → -1
The output is [-1, 3, -1].

Complexity Analysis
Time Complexity: O(m + n) where 
𝑚
m is nums1.length and 
𝑛
n is nums2.length.

We traverse nums2 once to build nextGreaterMap, which takes O(n) time.
We then map over nums1 to get the results from the hashmap, which takes O(m) time.
Space Complexity: O(n) for the hashmap and the stack, both of which store elements of nums2.

This efficient solution uses a monotonic stack and a hashmap to achieve the desired complexity.
