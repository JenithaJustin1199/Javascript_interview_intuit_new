/**
 * @param {string[]} strs
 * @return {string}
 */
var longestCommonPrefix = function(strs) {
    // If the input array is empty, return an empty string
    if (strs.length === 0) {
        return "";
    }

    // Start with the first string as the initial prefix
    let prefix = strs[0];

    // Iterate through the rest of the strings in the array
    for (let i = 1; i < strs.length; i++) {
        // Compare the current prefix with each string in the array
        while (strs[i].indexOf(prefix) !== 0) {
            console.log(strs[i].indexOf(prefix))
            // If the current string doesn't start with the prefix, trim the prefix
            prefix = prefix.substring(0, prefix.length - 1);
            // If the prefix becomes empty, return an empty string
            if (prefix === "") {
                return "";
            }
        }
    }
    return prefix; // Return the longest common prefix


    
};

The time and space complexity for this implementation of finding the longest common prefix can be explained as follows:

Time Complexity
Initial Setup:

The function starts by setting the first string in strs as the initial prefix. This operation is O(m), where 
𝑚
m is the length of the first string.
Outer Loop (Iterating Through Each String):

The function then iterates through each of the other strings in the array (for (let i = 1; i < strs.length; i++)). If there are 
𝑛
n strings in strs, this loop will run n-1 times.
Inner While Loop (Matching Prefix):

Inside this loop, there is a while loop that continues as long as the current string strs[i] does not start with the prefix.
Each time the while loop iterates, prefix is shortened by one character (using substring), which takes O(m) in the worst case since it potentially shortens by just one character each time.
In the worst case, this while loop could iterate up to m times for each string if the prefix needs to be shortened to match each string.
Overall Time Complexity:

Therefore, the worst-case time complexity is O(n * m):
𝑛
n: number of strings.
𝑚
m: length of the longest string (or initial prefix).
This is because, in the worst case, we may need to shorten prefix by one character for each of the n strings, leading to n * m comparisons.
Space Complexity
Prefix Storage:
The space complexity is O(1) if we only consider variables and pointer usage.
However, because prefix is a substring of one of the strings, and no additional data structures are being used that scale with input size, this still only needs O(m) space in memory to hold the prefix string.
Summary
Time Complexity: O(n * m), where 
𝑛
n is the number of strings and 
𝑚
m is the length of the longest string (or initial prefix).
Space Complexity: O(m), for storing the prefix string.
