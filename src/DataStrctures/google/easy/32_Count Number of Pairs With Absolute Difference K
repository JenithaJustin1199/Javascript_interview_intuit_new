To solve this problem efficiently, we can use a hash map (or dictionary) to track occurrences of numbers in the array. This allows us to find pairs with an absolute difference of 
𝑘
k in 
𝑂
(
𝑛
)
O(n) time, rather than the 
𝑂
(
𝑛
2
)
O(n 
2
 ) time needed for a brute-force approach.

Approach
Hash Map for Frequency Count:
Use a hash map (freq) to store the frequency of each element in the nums array as we iterate through it.
Count Valid Pairs:
For each number in nums, check if num + k and num - k exist in freq. If they do, the pairs (num, num + k) and (num, num - k) meet the condition 
∣
num
−
other
∣
=
𝑘
∣num−other∣=k.
Accumulate the counts of such pairs.
Steps
Traverse nums and populate freq with the count of each element.

Traverse nums again:

For each number, add the counts of num + k and num - k to the total pair count.
Since i < j isn’t strictly enforced by direction, we only count each pair once by ensuring that we only consider num + k and num - k if they are valid indices.
Return Result:

Sum up the total counts and return the result.

function countKDifference(nums, k) {
    const freq = {};
    let count = 0;
    
    // Populate frequency map
    for (const num of nums) {
        freq[num] = (freq[num] || 0) + 1;
    }
    
    // Count pairs with absolute difference k
    for (const num in freq) {
        const numInt = parseInt(num);
        if (freq[numInt + k]) {
            count += freq[numInt] * freq[numInt + k];
        }
    }
    
    return count;
}

// Example usage:
console.log(countKDifference([1, 2, 2, 1], 1));  // Output: 4
console.log(countKDifference([1, 3], 3));        // Output: 0
console.log(countKDifference([3, 2, 1, 5, 4], 2));  // Output: 3
Explanation with Example
For nums = [1, 2, 2, 1] and k = 1:

Frequency map: {1: 2, 2: 2}
Valid pairs:
1 -> 2 (counted 2 times)
2 -> 1 (counted 2 times)
Total count = 4.
Complexity Analysis
Time Complexity: 
𝑂
(
𝑛
)
O(n), where 
𝑛
n is the length of nums, because we iterate through the array twice.
Space Complexity: 
𝑂
(
𝑛
)
O(n), for storing the frequency map.
This solution is efficient and handles the constraints effectively.
