Here's an optimized JavaScript solution without using Array.map:

javascript
Copy code
function map(arr, fn) {
    const result = [];
    for (let i = 0; i < arr.length; i++) {
        result.push(fn(arr[i], i));
    }
    return result;
}

// Example usage:
console.log(map([1, 2, 3], function plusone(n) { return n + 1; }));       // Output: [2, 3, 4]
console.log(map([1, 2, 3], function plusI(n, i) { return n + i; }));      // Output: [1, 3, 5]
console.log(map([10, 20, 30], function constant() { return 42; }));       // Output: [42, 42, 42]
Explanation
Looping Through arr:

We use a for loop to iterate over each element in the input array, arr.
For each element at index i, we call the transformation function fn with the current element and its index as arguments.
Adding Transformed Values:

The result of each transformation, fn(arr[i], i), is added to the result array using result.push().
Return Result:

Finally, we return result, which contains the transformed values.
Complexity
Time Complexity: 
𝑂
(
𝑛
)
O(n), where 
𝑛
n is the length of arr, because we iterate over the array once.
Space Complexity: 
𝑂
(
𝑛
)
O(n), since we are creating a new array of the same size to store transformed values.
This solution is efficient and meets the problem constraints optimally.
