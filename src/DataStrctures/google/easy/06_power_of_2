To determine if a number n is a power of two, we can use bit manipulation.

Observations
For a number to be a power of two:

It must be positive.
In binary, powers of two have exactly one 1 bit (e.g., 1, 10, 100, 1000, etc.).
Given this, a power of two will have the property that:

n & (n - 1) == 0: This is true because subtracting 1 from a power of two flips all bits after the 1 bit to 1. So when we do n & (n - 1), it will yield 0 if n is a power of two.
n > 0: This ensures weâ€™re only checking positive numbers.
Solution
Here's the code that uses this logic:

javascript
Copy code
var isPowerOfTwo = function(n) {
    return n > 0 && (n & (n - 1)) === 0;
};
Explanation of the Code
n > 0: Check that n is positive.
(n & (n - 1)) === 0: This confirms that n has only one 1 bit, which only occurs in powers of two.
Examples
Example 1: n = 1

1 > 0 is true, and 1 & (1 - 1) = 1 & 0 = 0
Returns true.
Example 2: n = 16

16 > 0 is true, and 16 & (16 - 1) = 16 & 15 = 0
Returns true.
Example 3: n = 3

3 > 0 is true, but 3 & (3 - 1) = 3 & 2 = 2 (not 0)
Returns false.
Complexity Analysis
Time Complexity: O(1), as the bitwise operations are constant-time.
Space Complexity: O(1), since no additional space is used.
This approach is efficient and ideal for checking if a number is a power of two.
