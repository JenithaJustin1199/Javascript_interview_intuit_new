To solve the Rank Transform of an Array problem efficiently, we can use sorting and a dictionary to map each element to its rank.

Solution Approach
Sort the Unique Elements: To assign ranks, start by sorting the unique elements of arr. This way, the smallest unique element will have rank 1, the next smallest rank 2, and so on.

Map Elements to Ranks: Use a dictionary to map each unique element to its rank based on its position in the sorted list.

Transform the Array: Replace each element in arr with its corresponding rank using the dictionary.

Solution Steps
Extract unique elements from arr and sort them.
Create a dictionary rank_map that assigns each unique element to a rank starting from 1.
Transform arr by replacing each element with its corresponding rank from rank_map.
Code Implementation
javascript
Copy code
var arrayRankTransform = function(arr) {
    // Step 1: Sort the unique elements
    let sortedUnique = [...new Set(arr)].sort((a, b) => a - b);
    
    // Step 2: Map each element to its rank
    let rank_map = {};
    for (let i = 0; i < sortedUnique.length; i++) {
        rank_map[sortedUnique[i]] = i + 1;
    }
    
    // Step 3: Replace each element in arr with its rank
    return arr.map(num => rank_map[num]);
};
Example Walkthrough
Example 1: arr = [40,10,20,30]

Unique elements sorted: [10, 20, 30, 40]
rank_map: {10: 1, 20: 2, 30: 3, 40: 4}
Transformed array: [4, 1, 2, 3]
Example 2: arr = [100, 100, 100]

Unique elements sorted: [100]
rank_map: {100: 1}
Transformed array: [1, 1, 1]
Example 3: arr = [37,12,28,9,100,56,80,5,12]

Unique elements sorted: [5, 9, 12, 28, 37, 56, 80, 100]
rank_map: {5: 1, 9: 2, 12: 3, 28: 4, 37: 5, 56: 6, 80: 7, 100: 8}
Transformed array: [5, 3, 4, 2, 8, 6, 7, 1, 3]
Complexity Analysis
Time Complexity: O(n log n), where 
ùëõ
n is the length of arr, mainly due to the sorting step.
Space Complexity: O(n), for storing unique elements and rank_map.
This solution is efficient and meets the problem‚Äôs constraints effectively.
