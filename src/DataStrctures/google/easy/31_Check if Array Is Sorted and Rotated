To determine if an array nums is sorted and rotated, we can take advantage of the properties of a sorted array and count specific patterns to simplify the solution.

Approach
Count Descending Order Breaks: In a sorted and rotated array, there can be at most one point where the sequence goes from a higher number to a lower number. This point represents where the "rotation" happens. If there is more than one such point, the array cannot be a sorted and rotated array.
Check Wrap-Around: After the last element, the first element should continue the non-decreasing order if it's a sorted rotation.
Steps
Initialize a count variable to keep track of "descending order breaks."
Loop through the array, and for each adjacent pair (nums[i], nums[i+1]), if nums[i] > nums[i+1], increment the count.
After the loop, also check if nums[n-1] > nums[0] (to account for rotation wrapping from the end of the array to the start).
If the count is at most 1, return true; otherwise, return false.
Code
Here’s the JavaScript code implementing this approach:

javascript
Copy code
function check(nums) {
    let count = 0;
    const n = nums.length;

    for (let i = 0; i < n; i++) {
        if (nums[i] > nums[(i + 1) % n]) {
            count++;
        }
        if (count > 1) return false;
    }
    return true;
}

// Example usage:
console.log(check([3, 4, 5, 1, 2])); // Output: true
console.log(check([2, 1, 3, 4]));    // Output: false
console.log(check([1, 2, 3]));       // Output: true
Explanation with Example
For nums = [3, 4, 5, 1, 2]:

The descending order break happens once, between 5 and 1.
Since there's only one such break, the array can be considered sorted and rotated, so the function returns true.
For nums = [2, 1, 3, 4]:

There’s a descending order break between 2 and 1, and no rotation makes it sorted, so the function returns false.
Complexity Analysis
Time Complexity: 
𝑂
(
𝑛
)
O(n), where 
𝑛
n is the length of nums, because we traverse the array once.
Space Complexity: 
𝑂
(
1
)
O(1), as we only use a constant amount of extra space.
This approach is efficient and checks the sorted rotation condition in a single pass.
