Merge Sort Explained
Merge Sort is a divide-and-conquer algorithm that breaks down a list into smaller sublists until each sublist consists of a single element (which is inherently sorted). Then, it merges these smaller sorted sublists to produce new sorted sublists until the entire list is reassembled and sorted.

How It Works
Divide: Recursively split the array into halves until each subarray contains only one element.
Conquer: Merge the subarrays back together by comparing elements in each pair of subarrays and sorting them during the merge process.
Combine: Continue merging the sorted subarrays until you reach the original array length, resulting in a sorted array.
Example of Merge Sort
To sort [38, 27, 43, 3, 9, 82, 10]:

Split into halves: [38, 27, 43] and [3, 9, 82, 10].
Split [38, 27, 43] into [38] and [27, 43]; further split [27, 43] into [27] and [43].
Merge [27] and [43] to get [27, 43]; merge [38] and [27, 43] to get [27, 38, 43].
Repeat with the right side [3, 9, 82, 10] similarly to get [3, 9, 10, 82].
Merge [27, 38, 43] and [3, 9, 10, 82] to get [3, 9, 10, 27, 38, 43, 82].
Time Complexity (TC) and Space Complexity (SC)
Time Complexity: 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn) for all cases (best, average, and worst). This is because we split the array 
log
⁡
𝑛
logn times and merge 
𝑛
n elements at each level.
Space Complexity: 
𝑂
(
𝑛
)
O(n) due to the additional space required for the temporary arrays during the merge process.
Advantages of Merge Sort
Consistent Performance: Merge Sort consistently performs at 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn) for all cases, unlike algorithms like Quick Sort, which can degrade to 
𝑂
(
𝑛
2
)
O(n 
2
 ) in the worst case.
Stable Sort: Merge Sort maintains the relative order of equal elements, making it a stable sorting algorithm.
Parallelizable: Since the algorithm splits the list in half, it's suitable for parallel processing.
When to Use Merge Sort
Large Datasets: Since it guarantees 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn) performance, it's effective for large lists where performance is crucial.
Linked Lists: Merge Sort is particularly efficient for linked lists, as merging two linked lists only requires modifying pointers, not elements, resulting in 
𝑂
(
1
)
O(1) space complexity.
External Sorting: Ideal for sorting large datasets that don’t fit entirely in memory (e.g., files on disk), as it can work with smaller chunks sequentially.
Merge Sort in JavaScript
Here’s an implementation of Merge Sort in JavaScript:

javascript
Copy code
function mergeSort(arr) {
    // Base case: arrays with 1 or 0 elements are already sorted
    if (arr.length <= 1) return arr;

    // Divide: Find the midpoint of the array and split it into two halves
    const mid = Math.floor(arr.length / 2);
    const left = arr.slice(0, mid);
    const right = arr.slice(mid);

    // Recursively sort the left and right halves, then merge them
    return merge(mergeSort(left), mergeSort(right));
}

// Helper function to merge two sorted arrays
function merge(left, right) {
    const result = [];
    let i = 0, j = 0;

    // Merge elements in sorted order
    while (i < left.length && j < right.length) {
        if (left[i] < right[j]) {
            result.push(left[i]);
            i++;
        } else {
            result.push(right[j]);
            j++;
        }
    }

    // Append any remaining elements from left or right
    return result.concat(left.slice(i)).concat(right.slice(j));
}

// Example usage
console.log(mergeSort([38, 27, 43, 3, 9, 82, 10])); // Output: [3, 9, 10, 27, 38, 43, 82]
Key Points of Merge Sort
Time Complexity: 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn) for all cases.
Space Complexity: 
𝑂
(
𝑛
)
O(n) due to the additional space required for merging.
When to Use: Preferable for large arrays, linked lists, or when a stable sort is required.
In summary, Merge Sort’s efficiency and stability make it suitable for handling large datasets and scenarios where consistent performance is critical.
