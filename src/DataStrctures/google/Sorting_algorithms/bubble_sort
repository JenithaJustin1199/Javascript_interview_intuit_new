Bubble Sort Explained
Bubble Sort is a simple comparison-based sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The algorithm continues to "bubble up" the largest unsorted element to the end of the list in each pass.

How It Works
Start from the first element in the array.
Compare the current element with the next element.
If the current element is greater than the next, swap them.
Move to the next element and repeat until the end of the array is reached.
After each pass, the largest unsorted element is correctly placed at the end.
Repeat the above steps for the rest of the array, ignoring the last sorted elements.
Example
Let’s sort the array [5, 1, 4, 2, 8] using Bubble Sort:

Initial Array: [5, 1, 4, 2, 8]
Pass 1:
Compare 5 and 1, swap → [1, 5, 4, 2, 8]
Compare 5 and 4, swap → [1, 4, 5, 2, 8]
Compare 5 and 2, swap → [1, 4, 2, 5, 8]
Compare 5 and 8, no swap → [1, 4, 2, 5, 8]
Pass 2:
Compare 1 and 4, no swap → [1, 4, 2, 5, 8]
Compare 4 and 2, swap → [1, 2, 4, 5, 8]
Compare 4 and 5, no swap → [1, 2, 4, 5, 8]
No swaps were needed in this pass, so the array is sorted.
Time Complexity (TC) and Space Complexity (SC)
Best Case: 
𝑂
(
𝑛
)
O(n) - If the array is already sorted, Bubble Sort can make a single pass with no swaps.
Average and Worst Case: 
𝑂
(
𝑛
2
)
O(n 
2
 ) - It performs poorly on average and in the worst case due to nested loops.
Space Complexity: 
𝑂
(
1
)
O(1) - It sorts in place, so no additional memory is required.
When to Use Bubble Sort
Bubble Sort is generally not the go-to sorting algorithm for most use cases due to its inefficiency on large datasets. However, it can be useful in some specific scenarios:

Educational purposes: Bubble Sort is simple and easy to understand, making it a good starting point for learning sorting algorithms.
Small datasets: It can be reasonable for small datasets where the overhead of more complex sorting algorithms might not be worthwhile.
Nearly sorted arrays: If an array is almost sorted, Bubble Sort can perform quite well, achieving near 
𝑂
(
𝑛
)
O(n) performance.
Real-time swap detection: In cases where detecting whether an array is already sorted is valuable, Bubble Sort’s lack of swaps in a pass can indicate a sorted array.
Bubble Sort in JavaScript
Here's an implementation of Bubble Sort in JavaScript:

javascript
Copy code
function bubbleSort(arr) {
    let n = arr.length;
    let swapped;

    for (let i = 0; i < n - 1; i++) {
        swapped = false;

        for (let j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap adjacent elements
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
                swapped = true;
            }
        }

        // If no elements were swapped, the array is already sorted
        if (!swapped) break;
    }

    return arr;
}

// Example usage
console.log(bubbleSort([5, 1, 4, 2, 8])); // Output: [1, 2, 4, 5, 8]
Key Points to Remember
Efficiency: Bubble Sort is slow on large datasets and is generally not recommended for performance-critical applications.
Stability: It is a stable sort, meaning it preserves the relative order of equal elements.
In-Place Sorting: Like Insertion Sort, Bubble Sort does not require additional memory.
In general, while Bubble Sort is an excellent algorithm for understanding the basics of sorting, it's rarely the best choice in real-world applications due to its time complexity.
