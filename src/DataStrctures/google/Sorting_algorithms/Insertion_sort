Insertion Sort Explained
Insertion Sort is a straightforward sorting algorithm that builds the final sorted array one element at a time. It works similarly to how you might sort playing cards in your hand.

How It Works:
Start with the first element as a sorted portion.
For each subsequent element, place it in the correct position within the sorted portion.
Shift larger elements one position to the right to make room for the current element.
Example
Let’s sort the array [5, 2, 9, 1, 5, 6] using insertion sort:

Initial Array: [5, 2, 9, 1, 5, 6]
Start with the second element (2), compare it with 5 and place it before 5 as 2 < 5.
Array becomes [2, 5, 9, 1, 5, 6]
Move to 9, and since it’s already in the correct position, leave it as is.
Array is [2, 5, 9, 1, 5, 6]
Move to 1, shift all elements larger than 1 to the right, and place 1 in the correct spot.
Array becomes [1, 2, 5, 9, 5, 6]
Move to 5, place it before 9 but after the other 5.
Array becomes [1, 2, 5, 5, 9, 6]
Finally, place 6 in the correct position by shifting 9 to the right.
Sorted Array: [1, 2, 5, 5, 6, 9]
Time Complexity
Best Case (Nearly Sorted Array): 
𝑂
(
𝑛
)
O(n) - Minimal shifting needed.
Average and Worst Case: 
𝑂
(
𝑛
2
)
O(n 
2
 ) - High shifting and comparisons for each element.
Space Complexity: 
𝑂
(
1
)
O(1) - In-place sorting, using constant extra space.
When to Use Insertion Sort
Insertion Sort is ideal for:

Small datasets: For a small number of elements, it’s simple and performs efficiently.
Nearly sorted arrays: When the input is mostly sorted, it performs well, with a time complexity close to 
𝑂
(
𝑛
)
O(n).
Real-time insertion scenarios: When data arrives sequentially and needs to be kept sorted as new elements come in.
Insertion Sort in JavaScript
Here’s a JavaScript implementation of insertion sort:

javascript
Copy code
function insertionSort(arr) {
    for (let i = 1; i < arr.length; i++) {
        let current = arr[i];
        let j = i - 1;

        // Shift elements in the sorted portion of the array to make space
        while (j >= 0 && arr[j] > current) {
            arr[j + 1] = arr[j];
            j--;
        }
        // Insert the current element at the correct position
        arr[j + 1] = current;
    }
    return arr;
}

// Example usage
console.log(insertionSort([5, 2, 9, 1, 5, 6])); // Output: [1, 2, 5, 5, 6, 9]
Key Points to Remember
Efficiency: Works well on small or nearly sorted datasets.
Stability: Maintains the order of equal elements, which is useful in many real-world applications.
In-Place Sorting: Uses a constant amount of extra memory, making it space-efficient.
Insertion Sort is widely used in real-time applications for maintaining a sorted list with minimal data to process, such as limited-size datasets where quick adjustments are needed with each new element.
