You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
Example 2:


Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

To rotate the given 
𝑛
×
𝑛
n×n matrix by 90 degrees clockwise in place, we can follow a two-step approach:

Approach
Transpose the Matrix: Convert all rows to columns. For a matrix, transposing involves swapping elements at (i, j) with (j, i) for all 
𝑖
<
𝑗
i<j.
Reverse Each Row: After transposing, each row of the matrix is reversed to achieve the 90-degree clockwise rotation.
Example: 
3
×
3
3×3 Matrix
Let’s walk through this with an example.

Given:

matrix
=
[
1
2
3
4
5
6
7
8
9
]
matrix= 
​
  
1
4
7
​
  
2
5
8
​
  
3
6
9
​
  
​
 
Step 1: Transpose the Matrix

Swap elements at (i, j) with (j, i):

[
1
2
3
4
5
6
7
8
9
]
⇒
[
1
4
7
2
5
8
3
6
9
]
​
  
1
4
7
​
  
2
5
8
​
  
3
6
9
​
  
​
 ⇒ 
​
  
1
2
3
​
  
4
5
6
​
  
7
8
9
​
  
​
 
Step 2: Reverse Each Row

Reverse each row individually:

[
1
4
7
2
5
8
3
6
9
]
⇒
[
7
4
1
8
5
2
9
6
3
]
​
  
1
2
3
​
  
4
5
6
​
  
7
8
9
​
  
​
 ⇒ 
​
  
7
8
9
​
  
4
5
6
​
  
1
2
3
​
  
​
 
The result is a 90-degree clockwise rotated matrix.

Code
Here's how this can be implemented:

javascript
Copy code
var rotate = function(matrix) {
    const n = matrix.length;

    // Step 1: Transpose the matrix
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];
        }
    }

    // Step 2: Reverse each row
    for (let i = 0; i < n; i++) {
        matrix[i].reverse();
    }
};
Explanation of Code
Transpose Step: The nested loop goes through each element above the main diagonal (i < j) and swaps (i, j) with (j, i). This turns rows into columns.
Reverse Step: Using .reverse() on each row completes the 90-degree clockwise rotation.
Time and Space Complexity
Time Complexity: 
𝑂
(
𝑛
2
)
O(n 
2
 ), where 
𝑛
n is the dimension of the matrix. We visit each element in the matrix twice: once during transposition and once during the row reversal.
Space Complexity: 
𝑂
(
1
)
O(1), as we are modifying the matrix in place without using extra space.
This solution is efficient and works well within the given constraints.
