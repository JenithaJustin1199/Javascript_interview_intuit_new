To solve this problem efficiently without sorting, we can use a min-heap (priority queue) to keep track of the k largest elements in the array. By maintaining only the k largest elements, we can achieve an optimal time complexity of 
𝑂
(
𝑛
log
⁡
𝑘
)
O(nlogk), which is faster than sorting for large arrays.

Here’s how this approach works:

Initialize a Min-Heap: Insert elements into the heap until the heap has k elements.
Maintain the k Largest Elements: For each subsequent element, if it is larger than the root of the heap (the smallest of the largest k elements), remove the root and insert the new element.
Result: After processing all elements, the root of the min-heap will be the kth largest element.
This approach is efficient for large arrays where we only need the kth largest element.

Solution Code
Here's the solution in JavaScript:

javascript
Copy code
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var findKthLargest = function(nums, k) {
    // Use a min-heap to keep track of the k largest elements
    let minHeap = new MinPriorityQueue();

    // Add each element to the min-heap
    for (let num of nums) {
        minHeap.enqueue(num);
        // If heap size exceeds k, remove the smallest element
        if (minHeap.size() > k) {
            minHeap.dequeue();
        }
    }

    // The root of the min-heap will be the k-th largest element
    return minHeap.front().element;
};
Explanation
Heap Operations: Each enqueue and dequeue operation on the heap takes 
𝑂
(
log
⁡
𝑘
)
O(logk), and we do these for each element in nums.
Space Complexity: The heap size is maintained at 
𝑂
(
𝑘
)
O(k), so it’s space-efficient.
Complexity
Time Complexity: 
𝑂
(
𝑛
log
⁡
𝑘
)
O(nlogk) since we process each of the n elements and the heap operations are 
𝑂
(
log
⁡
𝑘
)
O(logk).
Space Complexity: 
𝑂
(
𝑘
)
O(k) due to the size of the heap.
Alternative with Quickselect
Another approach would be the Quickselect algorithm, which works in 
𝑂
(
𝑛
)
O(n) on average. Let me know if you’d like to explore that solution!



Yes, another efficient approach to find the kth largest element in an array is to use the Quickselect algorithm, which is based on the QuickSort algorithm. This method can achieve an average time complexity of 
𝑂
(
𝑛
)
O(n). Here's how it works:

Quickselect Algorithm
Partitioning: Similar to QuickSort, we can pick a pivot and partition the array such that elements less than the pivot come before it and elements greater than the pivot come after it.
Selection: After partitioning, we can determine the position of the pivot. If it's in the 
𝑘
kth position, we have found our answer. If it's greater than 
𝑘
k, we need to look in the left part of the array. If it's less, we look in the right part.
Here's the implementation in JavaScript:

javascript
Copy code
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var findKthLargest = function(nums, k) {
    const n = nums.length;

    // Helper function to perform the partition
    const partition = (left, right, pivotIndex) => {
        const pivotValue = nums[pivotIndex];
        // Move pivot to the end
        [nums[pivotIndex], nums[right]] = [nums[right], nums[pivotIndex]];
        let storeIndex = left;

        // Move all smaller elements to the left
        for (let i = left; i < right; i++) {
            if (nums[i] > pivotValue) { // We want the k-th largest, so we use >
                [nums[i], nums[storeIndex]] = [nums[storeIndex], nums[i]];
                storeIndex++;
            }
        }
        
        // Move pivot to its final place
        [nums[storeIndex], nums[right]] = [nums[right], nums[storeIndex]];
        return storeIndex;
    };

    const quickSelect = (left, right, k) => {
        if (left === right) {
            return nums[left]; // Only one element
        }
        
        // Select a random pivot index
        const pivotIndex = left + Math.floor(Math.random() * (right - left + 1));
        // Partitioning
        const newPivotIndex = partition(left, right, pivotIndex);

        // Check the position of the pivot
        if (newPivotIndex === k) {
            return nums[newPivotIndex]; // Found the k-th largest
        } else if (newPivotIndex < k) {
            return quickSelect(newPivotIndex + 1, right, k); // Search in the right part
        } else {
            return quickSelect(left, newPivotIndex - 1, k); // Search in the left part
        }
    };

    return quickSelect(0, n - 1, k - 1); // k-1 because we want 0-based index
};
Explanation of the Code
Partition Function: This function rearranges the elements based on a pivot, ensuring that all elements greater than the pivot are on the left and those less are on the right.
QuickSelect Function: This recursive function implements the quickselect algorithm. It calls the partition function to determine the position of the pivot and decides whether to search in the left or right half of the array based on the pivot's position.
Return Result: Finally, the quickSelect function is called with the initial bounds and adjusted k (zero-indexed).
Complexity Analysis
Time Complexity:
Average case: 
𝑂
(
𝑛
)
O(n)
Worst case: 
𝑂
(
𝑛
2
)
O(n 
2
 ) (occurs when the smallest or largest element is always chosen as the pivot)
Space Complexity: 
𝑂
(
1
)
O(1) for the in-place partitioning (ignoring the recursion stack).
Usage
This approach is efficient and works well for large arrays, making it a good alternative to the min-heap method. Let me know if you have any questions or need further explanations!
