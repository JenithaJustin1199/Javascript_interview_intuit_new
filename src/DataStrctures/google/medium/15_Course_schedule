Topological Sort (Topological Ordering)
Topological Sort is a linear ordering of vertices in a directed acyclic graph (DAG) such that for every directed edge u -> v, vertex u comes before vertex v in the ordering. Topological sorting is only possible if the graph has no directed cycles, i.e., it must be a Directed Acyclic Graph (DAG).

Topological sorting is widely used in scenarios where there are dependencies between tasks, like course scheduling, task ordering, build dependencies, etc.

Key Properties:
Directed Acyclic Graph (DAG): Topological sort can only be applied to a DAG (Directed Acyclic Graph). If the graph contains a cycle, it's impossible to get a valid topological order.
Unique or Multiple Orders: A graph may have multiple valid topological orders, but all must respect the dependencies between nodes.
Two Common Algorithms for Topological Sort:
Kahn's Algorithm (BFS-based)
DFS-based Topological Sort
Diagram Explanation:
Let's take an example of a graph with 6 vertices and the following edges (dependencies):

Copy code
0 → 1
0 → 2
1 → 3
2 → 3
3 → 4
4 → 5
This is a DAG because there are no cycles, and we can perform topological sorting on this.

Graph Diagram (Visual Representation):
Copy code
  0 → 1 → 3 → 4 → 5
  |     ↗   ↘
  → 2      → 3
Here, node 0 depends on nothing, but nodes 1 and 2 depend on 0. Similarly, node 3 depends on both 1 and 2. Node 4 depends on 3, and 5 depends on 4.

Example Code (Kahn's Algorithm - BFS-based):
The Kahn's Algorithm uses the in-degree of nodes to perform topological sorting. Here’s how you can implement it in JavaScript.

javascript
Copy code
function topologicalSort(numCourses, prerequisites) {
    // Step 1: Create an adjacency list and an in-degree array
    const adjList = new Map();
    const inDegree = new Array(numCourses).fill(0);
    
    // Build the adjacency list and fill the in-degree array
    for (let [course, pre] of prerequisites) {
        if (!adjList.has(pre)) {
            adjList.set(pre, []);
        }
        adjList.get(pre).push(course);
        inDegree[course]++; // Increment the in-degree of the current course
    }
    
    // Step 2: Initialize the queue with all nodes having in-degree of 0
    const queue = [];
    for (let i = 0; i < numCourses; i++) {
        if (inDegree[i] === 0) {
            queue.push(i); // No prerequisite courses for this course
        }
    }
    
    // Step 3: Perform the topological sort using BFS
    const topologicalOrder = [];
    while (queue.length > 0) {
        const current = queue.shift(); // Take the first course from the queue
        topologicalOrder.push(current); // Add it to the topological ordering
        
        // Reduce the in-degree of neighbors (dependent courses)
        if (adjList.has(current)) {
            for (let neighbor of adjList.get(current)) {
                inDegree[neighbor]--; // Decrease the in-degree by 1
                if (inDegree[neighbor] === 0) {
                    queue.push(neighbor); // If in-degree becomes 0, add it to the queue
                }
            }
        }
    }
    
    // If we processed all courses, return the topological order, else return an empty array (cycle detected)
    return topologicalOrder.length === numCourses ? topologicalOrder : [];
}

// Example Usage
const numCourses = 6;
const prerequisites = [[1,0], [2,0], [3,1], [3,2], [4,3], [5,4]];

console.log(topologicalSort(numCourses, prerequisites));
Explanation of Code:
Adjacency List and In-Degree Array:
We first create an adjacency list representing the graph where each node points to its dependent nodes.
The in-degree array keeps track of how many prerequisites (incoming edges) each course has.
Queue Initialization:
We add all nodes (courses) with in-degree = 0 to the queue since they can be taken without any prerequisites.
BFS Processing:
We process each node in the queue, adding it to the topological order. For each processed node, we reduce the in-degree of its neighbors. If any neighbor's in-degree becomes zero, we add it to the queue.
Cycle Detection:
If we manage to process all nodes, we return the topological order. If some nodes remain unprocessed (due to a cycle), the topological order cannot be completed.
Output:
For the graph and prerequisites given:

csharp
Copy code
[
 [1, 0],   // 0 -> 1
 [2, 0],   // 0 -> 2
 [3, 1],   // 1 -> 3
 [3, 2],   // 2 -> 3
 [4, 3],   // 3 -> 4
 [5, 4]    // 4 -> 5
]
The output will be:

plaintext
Copy code
[0, 1, 2, 3, 4, 5]
Diagram for Topological Order:
The topological order [0, 1, 2, 3, 4, 5] can be interpreted as:

Copy code
0 → 1 → 3 → 4 → 5
  ↘ 2
Where course 0 must be taken first, followed by 1 or 2, and then 3, and finally 4 and 5.

Summary:
Topological Sort is useful for solving problems where there are dependencies between tasks, like course prerequisites or task scheduling.
Kahn’s Algorithm (BFS-based) provides an efficient way to perform topological sorting, with a time complexity of O(V + E) where V is the number of nodes (courses) and E is the number of edges (dependencies).
