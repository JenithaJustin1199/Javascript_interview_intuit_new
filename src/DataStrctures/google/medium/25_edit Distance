Edit Distance
Solved
Medium
Topics
Companies
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

The Edit Distance problem can be solved efficiently using Dynamic Programming (DP). We use a 2D DP table to store the minimum number of operations required to convert substrings of word1 to substrings of word2, and we leverage previous results to build up the solution.

Approach
Define DP Table:

Let dp[i][j] represent the minimum number of operations required to convert the first i characters of word1 to the first j characters of word2.
Base Cases:

If i = 0, we need j insertions to make word1 match word2.
If j = 0, we need i deletions to reduce word1 to match word2.
State Transition:

If word1[i-1] == word2[j-1], no operation is needed, so dp[i][j] = dp[i-1][j-1].
If word1[i-1] != word2[j-1], consider the minimum of the following:
Insert a character into word1: dp[i][j-1] + 1
Delete a character from word1: dp[i-1][j] + 1
Replace a character in word1: dp[i-1][j-1] + 1
Thus, dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]).
Result:

The answer is in dp[m][n], where m and n are the lengths of word1 and word2, respectively.
Code Implementation
Here's the optimized code implementing this approach:

javascript
Copy code
var minDistance = function(word1, word2) {
    const m = word1.length;
    const n = word2.length;
    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));

    // Initialize base cases
    for (let i = 0; i <= m; i++) dp[i][0] = i;
    for (let j = 0; j <= n; j++) dp[0][j] = j;

    // Fill the dp table
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (word1[i - 1] === word2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = 1 + Math.min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]);
            }
        }
    }

    return dp[m][n];
};
Example Walkthrough
Consider the example:

plaintext
Copy code
word1 = "horse"
word2 = "ros"
The DP table after filling it would look something like this:

r	o	s
h	0	1	2	3
o	1	1	1	2
r	2	1	2	3
s	3	2	3	2
e	4	3	3	3
The final answer is dp[5][3] = 3, representing the minimum operations needed to convert "horse" to "ros".

Complexity Analysis
Time Complexity: 
𝑂
(
𝑚
×
𝑛
)
O(m×n), where 
𝑚
m and 
𝑛
n are the lengths of word1 and word2. We iterate over each cell in the DP table.
Space Complexity: 
𝑂
(
𝑚
×
𝑛
)
O(m×n), since we store the DP values for each pair of indices.
