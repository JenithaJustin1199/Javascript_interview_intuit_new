
BFS-Topological sort
function findOrder(numCourses, prerequisites) {
    // Step 1: Create an adjacency list and an in-degree array
    const adjList = new Map();
    const inDegree = new Array(numCourses).fill(0);
    
    // Build the adjacency list and fill the in-degree array
    for (let [course, pre] of prerequisites) {
        if (!adjList.has(pre)) {
            adjList.set(pre, []);
        }
        adjList.get(pre).push(course);
        inDegree[course]++; // Increment the in-degree of the current course
    }
    
    // Step 2: Initialize the queue with all nodes having in-degree of 0
    const queue = [];
    for (let i = 0; i < numCourses; i++) {
        if (inDegree[i] === 0) {
            queue.push(i); // No prerequisite courses for this course
        }
    }
    
    // Step 3: Perform the topological sort using BFS
    const topologicalOrder = [];
    while (queue.length > 0) {
        const current = queue.shift(); // Take the first course from the queue
        topologicalOrder.push(current); // Add it to the topological ordering
        
        // Reduce the in-degree of neighbors (dependent courses)
        if (adjList.has(current)) {
            for (let neighbor of adjList.get(current)) {
                inDegree[neighbor]--; // Decrease the in-degree by 1
                if (inDegree[neighbor] === 0) {
                    queue.push(neighbor); // If in-degree becomes 0, add it to the queue
                }
            }
        }
    }
    
    // If we processed all courses, return the topological order, else return an empty array (cycle detected)
    return topologicalOrder.length === numCourses ? topologicalOrder : [];
}

// Example Usage
const numCourses1 = 2;
const prerequisites1 = [[1, 0]];
console.log(findOrder(numCourses1, prerequisites1)); // Output: [0, 1]

const numCourses2 = 4;
const prerequisites2 = [[1, 0], [2, 0], [3, 1], [3, 2]];
console.log(findOrder(numCourses2, prerequisites2)); // Output: [0, 1, 2, 3] or [0, 2, 1, 3]

const numCourses3 = 1;
const prerequisites3 = [];
console.log(findOrder(numCourses3, prerequisites3)); // Output: [0]

Time Complexity:
O(V + E), where V is the number of courses (nodes) and E is the number of prerequisites (edges).
We process each node once and each edge once.
Space Complexity:
O(V + E), due to the adjacency list and the in-degree array.
