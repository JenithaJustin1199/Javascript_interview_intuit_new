To solve this problem optimally, we can use a greedy approach to determine which two digits to swap (if necessary) to achieve the largest possible number. Here's a step-by-step breakdown of the approach:

Approach
Convert to Array:

Convert the number into an array of digits so we can easily access and swap elements.
Record the Rightmost Positions:

Create an array last where last[d] represents the last (rightmost) index of each digit d in the number.
This allows us to know where the rightmost occurrence of each digit is, which is useful for finding larger digits to swap with earlier, smaller digits.
Identify the Swap:

Iterate through the digits from left to right.
For each digit at index i, check if there’s a larger digit that appears later (using the last array).
Specifically, for the current digit digits[i], look from 9 down to digits[i] + 1 to see if there's a digit with a higher value that appears later in the number. If such a digit exists, swap them immediately to get the largest possible number.
Return the Result:

After performing the swap, convert the array of digits back to an integer and return it.
Complexity
Time Complexity: 
𝑂
(
𝑛
)
O(n), where 
𝑛
n is the number of digits in the input number. This is because we only make a single pass to record positions and another pass to check for the swap.
Space Complexity: 
𝑂
(
1
)
O(1) if we exclude the input and output; otherwise 
𝑂
(
𝑛
)
O(n) due to the conversion of the number to an array of digits.
Solution Code
Here's the code that implements this approach in JavaScript:

javascript
Copy code
var maximumSwap = function(num) {
    const digits = Array.from(String(num), Number);
    const last = Array(10).fill(-1);

    // Fill last positions for each digit in the array
    for (let i = 0; i < digits.length; i++) {
        last[digits[i]] = i;
    }

    // Try to find the first place to make a swap for a larger digit
    for (let i = 0; i < digits.length; i++) {
        // Check from 9 down to digits[i] + 1 to find a larger digit to swap
        for (let d = 9; d > digits[i]; d--) {
            if (last[d] > i) {
                // Swap digits[i] with digits[last[d]]
                [digits[i], digits[last[d]]] = [digits[last[d]], digits[i]];
                return parseInt(digits.join(''), 10);  // Return after one swap
            }
        }
    }

    // Return the original number if no swap was made
    return num;
};

// Example usage:
console.log(maximumSwap(2736));  // Output: 7236
console.log(maximumSwap(9973));  // Output: 9973
Explanation of the Examples
Example 1: num = 2736

The array of digits is [2, 7, 3, 6].
The last array tells us that the rightmost 7 is at index 1, 3 is at index 2, and 6 is at index 3.
For digits[0] = 2, we find that 7 (at index 1) is larger, so we swap 2 and 7 to get 7236.
Example 2: num = 9973

The array of digits is [9, 9, 7, 3].
Each digit is already in the maximum possible configuration, so no swap is performed, and we return 9973.
This approach is efficient and optimizes for the earliest opportunity to create the maximum possible number by using a single scan of the digits and one swap if needed.
