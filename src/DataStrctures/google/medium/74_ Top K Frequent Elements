To solve the Top K Frequent Elements problem more efficiently than 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn), we can use a combination of a hash map and a bucket sort. This approach achieves 
𝑂
(
𝑛
)
O(n) time complexity.

Approach
Frequency Counting with a Hash Map:

Traverse through the array to count the occurrences of each element, storing them in a hash map where the keys are the elements and the values are their frequencies.
Bucket Sort:

We create a list of buckets where the index of each bucket represents a frequency, and each bucket holds the elements that appear with that frequency.
Since the maximum possible frequency of any element is n (if all elements are the same), we create a bucket array of size n + 1.
Collecting the Top K Elements:

Starting from the highest frequency bucket and moving backward, gather elements until we have collected k elements.
Why This Works Efficiently
Bucket Sort allows us to avoid sorting the frequencies directly. Instead, we can group elements by frequency in linear time.
Iterating from the highest frequency down ensures that we gather the most frequent elements in 
𝑂
(
𝑛
)
O(n) time.
Code Implementation
Here's the JavaScript code implementing this approach:

javascript
Copy code
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var topKFrequent = function(nums, k) {
    const freqMap = new Map();
    
    // Step 1: Count frequency of each element
    for (let num of nums) {
        freqMap.set(num, (freqMap.get(num) || 0) + 1);
    }
    
    // Step 2: Initialize buckets for bucket sort
    const bucket = Array(nums.length + 1).fill(null).map(() => []);
    
    // Step 3: Fill buckets where index represents frequency
    for (let [num, freq] of freqMap) {
        bucket[freq].push(num);
    }
    
    // Step 4: Gather top k frequent elements starting from highest frequency
    const result = [];
    for (let i = bucket.length - 1; i >= 0 && result.length < k; i--) {
        if (bucket[i] !== null) {
            result.push(...bucket[i]);
        }
    }
    
    return result.slice(0, k);  // Ensure we return exactly k elements
};
Explanation with Example
Example: nums = [1,1,1,2,2,3], k = 2
Frequency Map:

freqMap will store: { 1: 3, 2: 2, 3: 1 }.
Bucket Array:

Initialize bucket array with empty lists: bucket = [[], [], [], [], [], [], []] (size n + 1 where n = nums.length).
Populate bucket based on frequency:
bucket[3] = [1] (since 1 appears 3 times)
bucket[2] = [2] (since 2 appears 2 times)
bucket[1] = [3] (since 3 appears 1 time)
Final bucket array: [[], [3], [2], [1], [], [], []].
Collecting Top K Elements:

Traverse bucket from the end (highest frequency), and collect elements until we have k elements:
Add elements from bucket[3] → [1]
Add elements from bucket[2] → [1, 2]
We now have exactly k elements, so we return [1, 2].
Complexity Analysis
Time Complexity: 
𝑂
(
𝑛
)
O(n)

Counting frequencies takes 
𝑂
(
𝑛
)
O(n).
Filling the buckets also takes 
𝑂
(
𝑛
)
O(n).
Collecting the top k elements takes 
𝑂
(
𝑛
)
O(n) in the worst case.
Space Complexity: 
𝑂
(
𝑛
)
O(n)

The frequency map and bucket array both use 
𝑂
(
𝑛
)
O(n) space.
This method ensures an efficient 
𝑂
(
𝑛
)
O(n) solution for finding the top k frequent elements without explicit sorting, making it faster than 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn) approaches.
