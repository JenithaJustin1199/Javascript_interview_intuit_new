The Longest Common Subsequence (LCS) problem can be solved using dynamic programming (DP) to efficiently find the maximum subsequence length common to two strings. This approach uses a 2D DP table to avoid redundant calculations, making it efficient for strings of length up to 1000.

Approach
Define a DP Array:

Create a 2D array dp where dp[i][j] will store the length of the LCS of text1[0...i-1] and text2[0...j-1].
DP Transition:

If text1[i-1] === text2[j-1], then:
dp[i][j] = dp[i-1][j-1] + 1 (since the characters match, we extend the LCS by 1).
If text1[i-1] !== text2[j-1], then:
dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) (take the max of skipping a character from either text1 or text2).
Initialization:

Initialize dp[0][j] and dp[i][0] as 0 because an empty string has no common subsequence with any other string.
Result:

The length of the longest common subsequence will be found at dp[m][n], where m and n are the lengths of text1 and text2, respectively.
Time Complexity
O(m * n) where m is the length of text1 and n is the length of text2, because each cell in the dp table is filled once.
Space Complexity
O(m * n) for storing the dp table.
Here's the JavaScript solution implementing this approach:

javascript
Copy code
var longestCommonSubsequence = function(text1, text2) {
    const m = text1.length;
    const n = text2.length;

    // Initialize a 2D DP array with dimensions (m+1) x (n+1), filled with 0
    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));

    // Fill the dp array using the rules discussed
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (text1[i - 1] === text2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1; // characters match
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); // take the max
            }
        }
    }

    // The value at dp[m][n] contains the length of the longest common subsequence
    return dp[m][n];
};

// Example Usage:
console.log(longestCommonSubsequence("abcde", "ace")); // Output: 3
console.log(longestCommonSubsequence("abc", "abc"));   // Output: 3
console.log(longestCommonSubsequence("abc", "def"));   // Output: 0
Explanation with Example
For text1 = "abcde" and text2 = "ace":

Start with an empty 2D table dp.
Fill in the table by comparing characters in both strings.
For i=1 and j=1, text1[0] === text2[0] ("a" === "a"), so dp[1][1] = dp[0][0] + 1 = 1.
Continue this process across the table.
The resulting table will yield the value at dp[m][n] = 3, which corresponds to the LCS length "ace".
This DP solution is efficient for the input constraints and avoids redundant recomputation, making it optimal for this problem.
