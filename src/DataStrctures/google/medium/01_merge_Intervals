To solve the "Merge Intervals" problem in JavaScript, you need to merge all overlapping intervals and return a list of non-overlapping intervals that cover all the intervals from the input. Here's the step-by-step approach:

Approach
Sort the Intervals:

First, sort the intervals based on their start times. This will make it easier to identify overlapping intervals.
Iterate Over the Intervals:

After sorting, iterate over the intervals. Start with the first interval and compare it with the next one.
If the next interval overlaps with the current interval (i.e., its start time is less than or equal to the end time of the current interval), merge them by updating the end time to be the maximum of both end times.
If they don't overlap, push the current interval into the result array and move to the next interval.
Handle the Last Interval:

Once the iteration is complete, push the last interval into the result array.
Solution Code:
javascript
Copy code
/**
 * @param {number[][]} intervals
 * @return {number[][]}
 */
var merge = function(intervals) {
    // Step 1: Sort intervals based on their starting time
    intervals.sort((a, b) => a[0] - b[0]);
    
    const result = [];
    
    // Step 2: Initialize the first interval
    let currentInterval = intervals[0];
    
    for (let i = 1; i < intervals.length; i++) {
        const nextInterval = intervals[i];
        
        // Step 3: Check if current interval overlaps with next interval
        if (currentInterval[1] >= nextInterval[0]) {
            // Merge the intervals by updating the end time
            currentInterval[1] = Math.max(currentInterval[1], nextInterval[1]);
        } else {
            // If they don't overlap, add the current interval to the result and move to the next one
            result.push(currentInterval);
            currentInterval = nextInterval;
        }
    }
    
    // Step 4: Push the last interval
    result.push(currentInterval);
    
    return result;
};
Explanation:
Sorting:

First, the array is sorted based on the starting time of each interval. This makes it easier to handle overlaps.
javascript
Copy code
intervals.sort((a, b) => a[0] - b[0]);
For example, if the input is [[1,3],[2,6],[8,10],[15,18]], the sorted array will be:

lua
Copy code
[[1,3], [2,6], [8,10], [15,18]]
Merging:

We start with the first interval, and for each subsequent interval, we check if it overlaps with the current interval (i.e., if the start time of the next interval is less than or equal to the end time of the current interval).
If there’s an overlap, we merge them by updating the end time of the current interval to the maximum end time of the two overlapping intervals.
If there’s no overlap, we add the current interval to the result array and move to the next one.
Handling the Last Interval:

After the loop, we add the last interval (which might have been updated) to the result array.
Example Walkthrough:
Example 1:
Input:

javascript
Copy code
intervals = [[1,3],[2,6],[8,10],[15,18]]
After sorting:
lua
Copy code
[[1,3], [2,6], [8,10], [15,18]]
Iteration:
Compare [1,3] with [2,6]. They overlap, so we merge them into [1,6].
Compare [1,6] with [8,10]. No overlap, so we add [1,6] to the result and move to the next interval.
Compare [8,10] with [15,18]. No overlap, so we add [8,10] to the result and move to the next interval.
Final result:
lua
Copy code
[[1,6], [8,10], [15,18]]
Example 2:
Input:

javascript
Copy code
intervals = [[1,4],[4,5]]
After sorting:
lua
Copy code
[[1,4], [4,5]]
Iteration:
Compare [1,4] with [4,5]. They overlap (since 4 == 4), so we merge them into [1,5].
Final result:
lua
Copy code
[[1,5]]
Time Complexity:
Sorting the intervals takes 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn), where 
𝑛
n is the number of intervals.
Merging the intervals takes 
𝑂
(
𝑛
)
O(n) since we iterate through the intervals once.
Overall time complexity: 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn).
Space Complexity:
The space complexity is 
𝑂
(
𝑛
)
O(n) for storing the result array.
This solution handles the problem efficiently and works within the provided constraints.
