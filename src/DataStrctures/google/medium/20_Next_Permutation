To solve the Next Permutation problem efficiently, the goal is to modify the given array in place to get the next lexicographically greater permutation. If no such permutation exists (i.e., the array is sorted in descending order), we rearrange it to the smallest possible order (i.e., sorted in ascending order).

Approach:
Find the pivot:

Traverse the array from right to left and find the first element nums[i] such that nums[i] < nums[i + 1]. This index i is called the pivot.
If no such element is found, it means the array is sorted in descending order, and we simply reverse the entire array to return the smallest permutation.
Find the next larger element:

If a pivot is found, scan the array from right to left to find the smallest element nums[j] that is greater than nums[i].
Swap:

Swap the pivot element nums[i] with nums[j].
Reverse the suffix:

Reverse the elements to the right of the pivot (i+1 to the end of the array). This guarantees that the portion of the array after i is the smallest possible lexicographical order.
Time Complexity:
O(n) where n is the length of the array, because we are performing constant time operations while scanning the array multiple times.
Space Complexity:
O(1) since we are performing the modification in place, without using any additional space.
Code:
javascript
Copy code
var nextPermutation = function(nums) {
    let n = nums.length;
    let i = n - 2;

    // Step 1: Find the first decreasing element from the right
    while (i >= 0 && nums[i] >= nums[i + 1]) {
        i--;
    }

    if (i >= 0) {
        // Step 2: Find the first element larger than nums[i] from the right
        let j = n - 1;
        while (nums[j] <= nums[i]) {
            j--;
        }
        // Step 3: Swap nums[i] and nums[j]
        [nums[i], nums[j]] = [nums[j], nums[i]];
    }

    // Step 4: Reverse the elements to the right of i to get the smallest lexicographical order
    let left = i + 1;
    let right = n - 1;
    while (left < right) {
        [nums[left], nums[right]] = [nums[right], nums[left]];
        left++;
        right--;
    }
};
Explanation:
Step 1: We scan the array from right to left to find the first element (nums[i]) that breaks the descending order. This is the pivot.
Step 2: From the right side, we find the smallest element larger than nums[i] (let's call it nums[j]).
Step 3: Swap the pivot nums[i] with nums[j].
Step 4: Reverse the part of the array after i to ensure that it's in ascending order, providing the next permutation.
Example Walkthrough:
Example 1:
Input: nums = [1,2,3]

Step 1: Find the pivot. i = 1 (nums[1] = 2).
Step 2: Find the element just larger than 2, which is 3 at index 2.
Step 3: Swap nums[1] with nums[2], resulting in nums = [1,3,2].
Step 4: No need to reverse as the suffix is already in ascending order. Output: [1,3,2].
Example 2:
Input: nums = [3,2,1]

Step 1: No pivot is found since the array is in descending order.
Step 2: Reverse the entire array to get the smallest lexicographical permutation. Output: [1,2,3].
Example 3:
Input: nums = [1,1,5]

Step 1: Find the pivot. i = 1 (nums[1] = 1).
Step 2: Find the element just larger than 1, which is 5 at index 2.
Step 3: Swap nums[1] with nums[2], resulting in nums = [1,5,1].
Step 4: No need to reverse as the suffix is already in ascending order. Output: [1,5,1].
This solution efficiently finds the next permutation with a time complexity of O(n) and a space complexity of O(1).
