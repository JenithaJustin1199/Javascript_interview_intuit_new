Validate Binary Search Tree
Solved
Medium
Topics
Companies
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1


To efficiently validate a Binary Search Tree (BST), we can perform an in-order traversal of the tree and check whether each node adheres to the BST property. Specifically, as we traverse, each node's value must be within specific bounds defined by its parent nodes. Here‚Äôs an efficient solution with time complexity 
ùëÇ
(
ùëõ
)
O(n) and space complexity 
ùëÇ
(
‚Ñé
)
O(h), where 
‚Ñé
h is the height of the tree.

Solution Approach
The in-order traversal approach relies on the following:

Each node's value must lie between a certain minimum and maximum value:
The left child must be less than the current node's value.
The right child must be greater than the current node's value.
We use recursion to traverse each node, passing down updated bounds based on the node‚Äôs position in the tree.
Code Implementation
javascript
Copy code
var isValidBST = function(root) {
    // Helper function to validate the BST with boundaries
    function validate(node, min, max) {
        if (node === null) return true; // Reached leaf node
        
        // Validate node's value against min and max boundaries
        if ((min !== null && node.val <= min) || (max !== null && node.val >= max)) {
            return false;
        }
        
        // Recursively validate left and right subtrees with updated boundaries
        return validate(node.left, min, node.val) && validate(node.right, node.val, max);
    }
    
    // Start validation from root with no boundaries
    return validate(root, null, null);
};
Explanation of the Code
Recursive Validation:

We define a helper function validate(node, min, max) that checks if the current node is within the bounds defined by min and max.
If the node.val violates the BST rules (node.val <= min or node.val >= max), the function returns false.
Updating Boundaries:

For the left subtree, we pass max = node.val, setting an upper boundary since all values in the left subtree should be less than node.val.
For the right subtree, we pass min = node.val, setting a lower boundary since all values in the right subtree should be greater than node.val.
Base Case:

If we reach a null node (leaf node), we return true, as leaf nodes naturally satisfy BST properties.
Complexity Analysis
Time Complexity: 
ùëÇ
(
ùëõ
)
O(n) ‚Äî We visit each node exactly once.
Space Complexity: 
ùëÇ
(
‚Ñé
)
O(h) ‚Äî The maximum depth of the recursive call stack is 
‚Ñé
h, where 
‚Ñé
h is the height of the tree.
This solution is efficient and ensures the BST properties are verified correctly for all nodes.
